package javaderbygui;

import java.awt.Color;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

public class JFrame extends javax.swing.JFrame {
    private Connection conn;

    public JFrame() {
        initComponents();
        conn = connection();
        read(conn);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();
        jTextField2 = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Java Derby CRUD Application");
        setResizable(false);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null}
            },
            new String [] {
                "Title 1", "Title 2"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setCellSelectionEnabled(true);
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);
        jTable1.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jButton1.setText("Insert");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel2.setText("Item Price");

        jButton3.setText("Delete");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jTextField2.setName(""); // NOI18N

        jButton2.setText("Update");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jTextField1.setName(""); // NOI18N

        jLabel1.setText("Item Name");

        jLabel3.setBackground(new java.awt.Color(204, 204, 204));
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("App Developed by Gilbert JFM");
        jLabel3.setBorder(javax.swing.BorderFactory.createEtchedBorder(java.awt.Color.lightGray, java.awt.Color.darkGray));
        jLabel3.setOpaque(true);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, 125, Short.MAX_VALUE)
                            .addComponent(jTextField1))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addGap(8, 8, 8)
                                .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2)
                    .addComponent(jButton3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(13, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        create(conn);
        read(conn);
        clear();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        if (evt.getClickCount() == 1) {
            int row = jTable1.getSelectedRow();
            int column = jTable1.getSelectedColumn();
            // Get the data from the selected row
            String itemName = jTable1.getValueAt(row, 0).toString();
            String itemPrice = jTable1.getValueAt(row, 1).toString();

            // Set the data to the text fields
            jTextField1.setText(itemName);
            jTextField2.setText(itemPrice);
        }
    }//GEN-LAST:event_jTable1MouseClicked

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        update(conn);
        read(conn);
        clear();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        delete(conn);
        read(conn);
        clear();
    }//GEN-LAST:event_jButton3ActionPerformed
    
    private Connection connection() {
        // Create a connection to a Derby database
        String url = "jdbc:derby:/Documents/NetBeansProjects/JavaDerbyGUI/saved data/item.db;create=true";;
            
        Connection conn = null;
        try {
            conn = DriverManager.getConnection(url);
        } catch (SQLException e) {
            System.out.println("Error connecting to the database: " + e.getMessage());
        }
        return conn;
    }
    
    private void create(Connection conn){
        //Return Textfield 1 into Item Name
        String itemName = jTextField1.getText();
        //Return TextField 2 into Item Price
        String text = jTextField2.getText();
        //Check if TextField empty
        if (itemName.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please insert item name");
            
            //Notification
            jLabel3.setText("Please insert item name");
            jLabel3.setBackground(Color.red);
            return;
        }if(text.isEmpty()){
            JOptionPane.showMessageDialog(this, "Please insert item price");
            
            //Notification
            jLabel3.setText("Please insert item price");
            jLabel3.setBackground(Color.red);
            return;
        }
        int itemPrice = Integer.parseInt(text);
        
        //Check if item already exist
        try {
            // Check if the item already exists in the database
            Statement stmt = conn.createStatement();
            ResultSet rs = stmt.executeQuery("SELECT * FROM item WHERE itemName = '" + itemName + "'");
            if (rs.next()) {
                // Item already exists, show a warning message
                JOptionPane.showMessageDialog(this, "Item already exists in the database.");
                
                //Notification
                jLabel3.setText("Cant insert data, item already exist");
                jLabel3.setBackground(Color.red);
                return;
            }
        } catch (SQLException e) {
            System.out.println("Error inserting data: " + e.getMessage());
        }
        
        //Insert the value into database
        try (PreparedStatement stmt = conn.prepareStatement("INSERT INTO item (itemName, itemPrice) VALUES (?, ?)")) {
            stmt.setString(1, itemName);
            stmt.setInt(2, itemPrice);

            // Execute the insert statement
            stmt.executeUpdate();
            
            //Notification
            System.out.println(itemName + " is saved into database");
            jLabel3.setText("New item has been created");
            jLabel3.setBackground(Color.green);
        } catch (SQLException e) {
            System.out.println("Error inserting data: " + e.getMessage());
        }
    }
    
    private void read(Connection conn) {
        try (Statement stmt = conn.createStatement()) {
            ResultSet rs = stmt.executeQuery("SELECT * FROM item");

            jTable1.setModel(new DefaultTableModel(
                new Object [][] {},
                new String [] {
                    "Item Name", "Item Price"
                }
            ) {
                @Override
                public boolean isCellEditable(int row, int column) {
                    return false;
                }
            });

            while (rs.next()) {
                String itemName = rs.getString("itemName");
                int itemPrice = rs.getInt("itemPrice");

                ((javax.swing.table.DefaultTableModel) jTable1.getModel()).addRow(new Object[]{itemName, itemPrice});
            }
        } catch (SQLException e) {
            System.out.println("Error reading the database: " + e.getMessage());
        }
    }
    
    private void update(Connection conn){
        String itemName = jTextField1.getText();
        String text = jTextField2.getText();
        //Check if the Textfield is empty
        if (itemName.isEmpty() || text.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please select the item from the table");
            
            //Notification
            jLabel3.setText("Update failed, please click the already existing item in the table");
            jLabel3.setBackground(Color.red);
            return;
        }
        int itemPrice = Integer.parseInt(text); 
        
        // Create a prepared statement to check if the item name exists
        PreparedStatement pstmt = null;
        try {
            pstmt = conn.prepareStatement("SELECT 1 FROM item WHERE itemName = ?");
            pstmt.setString(1, itemName);
            ResultSet rs = pstmt.executeQuery();

        if (rs.next()) {
            // Item name exists, update the value
            try (PreparedStatement stmt = conn.prepareStatement("UPDATE item SET itemPrice = ? WHERE itemName = ?")) {
                stmt.setInt(1, itemPrice);
                stmt.setString(2, itemName);
                
                int rowsUpdated = stmt.executeUpdate();
                //Check if the data is updated
                if (rowsUpdated > 0) {
                    //Notification
                    System.out.println("Item updated successfully!");
                    jLabel3.setText("An item has been updated");
                    jLabel3.setBackground(Color.green);
                } else {
                    System.out.println("No rows updated.");
                }
            } catch (SQLException e) {
                System.out.println("Error updating item: " + e.getMessage());
            }
        } else {
            // Item name does not exist, warn the user
            JOptionPane.showMessageDialog(this, "Item name '" + itemName + "' does not exist in the database.");
            //Notification
            jLabel3.setText("Update failed, please click the already existing item in the table");
            jLabel3.setBackground(Color.red);
        }
        } catch (SQLException e) {
            System.out.println("Error executing query: " + e.getMessage());
        }
    }
    
    private void delete(Connection conn){
        String itemName = jTextField1.getText();
        if (itemName.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please select the item from the table");
            
            //Notification
            jLabel3.setText("Update failed, please click the already existing item in the table");
            jLabel3.setBackground(Color.red);
            return;
        }
        
        try {
            Statement stmt = conn.createStatement();

            ResultSet rs = stmt.executeQuery("SELECT * FROM item WHERE itemName = '" + itemName + "'");
            if (rs.next()) {
                int confirm = JOptionPane.showConfirmDialog(this, "Are you sure you want to delete " + itemName + "?");
                if (confirm == JOptionPane.YES_OPTION) {
                    stmt.executeUpdate("DELETE FROM item WHERE itemName = '" + itemName + "'");
                    
                    //Notification
                    System.out.println("Item deleted successfully.");
                    jLabel3.setText("An item has been deleted");
                    jLabel3.setBackground(Color.green);
                }
            } else {
                JOptionPane.showMessageDialog(this, "Item not found in the database.");
                
                //Notification
                jLabel3.setText("Update failed, please click the already existing item in the table");
                jLabel3.setBackground(Color.red);
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Error: " + e.getMessage());
        }
    }
    
    private void clear(){
        jTextField1.setText("");
        jTextField2.setText("");
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    // End of variables declaration//GEN-END:variables
}
